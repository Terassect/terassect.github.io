

//for doing interpolations on buffers like delay lines or loops 
//handles the edge cases for you
namespace extra::interp (int arrSize,using Tx = float, using Tt = float64)
{
    using Wrap = wrap<arrSize>;

    Tx linear<Tx>( Tx[] x, Tt t )
    {
        t = wrap(t,Tt(arrSize));
        let idxs = Wrap[2]( Wrap(t), Wrap(t+1) );
        let d = Tx(t - Tt(idxs[0]));
        return x[idxs[0]] + (x[idxs[1]] - x[idxs[0]])*d;    
    }

    //this might be useful in a delay line for delays < 1 sample
    Tx leftLeaningQuadratic<Tx>( Tx[] x, Tt t )    
    {
        t = wrap(t,Tt(arrSize));
        let idxs = Wrap[3]( Wrap(t-1), Wrap(t), Wrap(t+1) );
        let d = Tx(t - Tt(idxs[1]));
        return d*d*(-x[idxs[1]] + Tt(0.5)*x[idxs[2]] + Tt(0.5)*x[idxs[0]]) + d*(Tt(0.5)*x[idxs[2]] - Tt(0.5)*x[idxs[0]]) + x[idxs[1]];
    }

    Tx cubic<Tx>( Tx[] x, Tt t )   
    {
        t = wrap(t,Tt(arrSize));
        let idxs = Wrap[4]( Wrap(t-1), Wrap(t), Wrap(t+1), Wrap(t+2) );
        let d = Tx(t - Tt(idxs[1]));
        return d*d*d*(Tx(0.5)*x[idxs[1]] - Tx(0.5)*x[idxs[2]] + Tx(1./6.)*x[idxs[3]] - Tx(1./6.)*x[idxs[0]]) + d*d*(-x[idxs[1]] + Tx(1./2.)*x[idxs[2]] + Tx(1./2.)*x[idxs[0]]) + d*(Tx(-1./2.)*x[idxs[1]] + x[idxs[2]] - Tx(1./6.)*x[idxs[3]] - Tx(1./3.)*x[idxs[0]]) + x[idxs[1]];
    }

} // namespace interp

/*
usage:
extra::DynamicArray(Thing)::Array things;
Thing thing;
things.push( thing ); 
etc

remove() is a tad expensive if length and/or Type is large
*/
namespace extra::DynamicArray (using Type , int maxSize=64)
{
    using Clamp = clamp<maxSize>;
    
    struct Array
    {
        Type[maxSize] arr;
        Clamp length;

        Type get(int idx)
        {
            idx = wrap( idx, this.length );
            return this.arr[wrap<maxSize>(idx)];
        }

        void push( Type newItem )
        {
            this.arr[this.length] = newItem;
            this.length++;
        }

        void remove( int idx )
        {
            if(this.length <= 0)
                return;

            idx = wrap(idx,this.length);

            for(var i=Clamp(idx) ; i<(this.length-1); i++)
            {
                this.arr[i] = this.arr[Clamp(i+1)];
            }
            this.length--;
        }
    }

} // namespace DynamicArray

/* Lookup table using either linear or cubic interpolation (interpOrder either 1 or 3)
example usage:

let tableSize = 32;
extra::lookuptable( float, float64, tableSize, 0.f, float(twoPi), 1 )::Table sine;
for(int i=0;i<tableSize;i++)
    sine.set(i , std::intrinsics::sin( sine.indexToX(i) ) );
sine.get(1.2345f);
sine.get(float<2>(2.13f,1.27f));
*/
namespace extra::lookuptable(using Tx, using Ty, int numPoints, Tx lowerBound, Tx upperBound, int interpOrder=1)
{
    let length = upperBound-lowerBound;
    using Clamp = clamp<numPoints>;

    struct Table 
    {
        Ty[numPoints] table;

        Tx indexToX(int i)
        {
            return lowerBound + i/Tx(numPoints-1)*length;
        }

        Tx xToIndex(Tx x)
        {
            return (numPoints-1)*(x-lowerBound)/length ;
        }

        void set(int i, Ty y)
        {
            if(i<0 || i>=numPoints)
                return;
                
            this.table[Clamp(i)] = y;
        }

        //Oh wow this actually works...?
        Ty<T.size> get<T>( T x )
        {
            Ty<T.size> y;

            for(wrap<T.size> i)
                y[i] = this.get(x[i]);

            return y; 
        }
        
        Ty get(Tx x)
        {
            let i = Tx( this.xToIndex(x) );

            if(i<=0) {return this.table[0];}
            if(i>=numPoints-1) {return this.table[numPoints-1];}

            if(interpOrder == 1)
                return extra::interp(numPoints, Ty, Tx)::linear(this.table,i);

            if(interpOrder == 3)
            {
                if(i <= interpOrder/2 || i>=(numPoints-1-interpOrder/2))
                    return extra::interp(numPoints, Ty, Tx)::linear(this.table,i);

                return extra::interp(numPoints, Ty, Tx)::cubic(this.table,i);
            }

            return Ty(0);
        }
    }
}

namespace extra
{
    // useful for eg feedback nodes
    graph Dummy (using T=float)
    {
        input stream T in;
        output stream T out;

        connection in -> out;
    } 
}

