/*
This one uses a lot of cpu because of the filter.
8 voices x 4 ladder stages x ~3 iterations per sample x 3 tanh/cosh calls  = 288 tanh/cosh calls per sample YIKES
    Somebody should optimize that...
Go big or go home!
*/
graph PolySynth 
{
    input event std::midi::Message midiIn;
    input value float cutoff[[name:"cutoff",min:0.f,max:1.f,init:0.5f]];
    input value float resonance[[name:"reso" , min:-2.f , max:4.f, init:1.f ]];

    output stream float out;

    let voiceCount = 8;

    node
    {
        voices = Voice[voiceCount];
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
    }

    connection
    {
        cutoff -> voices.cutoff;
        resonance -> voices.resonance;
        // Convert the midi message to a our std::notes messages and forward to the voice allocator
        midiIn -> std::midi::MPEConverter -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.eventIn;

        // Sum the voices audio out to the output
        voices -> out;
    }
}

graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input value float cutoff;
    input value float resonance;

    output stream float out;

    node
    {
        osc1 = extra::oscillators::blit::Saw;
        // osc2 = extra::oscillators::blit::Saw;

        frequency = std::smoothing::SmoothedValueStream(0.001f,1000.f);
        lfoF = std::smoothing::SmoothedValueStream(0.001f,0.6f);

        ampEnv = extra::ADSR;

        filter = LadderFilter;
        filterLFO = extra::oscillators::Quadrature;
        
    }

    event eventIn(std::notes::NoteOn e)
    {
        ampEnv.releaseIn <- 100.f;

        //uncomment one of these
        namespace N = std::notes;
        //namespace N = extra::microtuning::edt(13.f);
        //namespace N = extra::microtuning::edo(15.3198f);
        //namespace N = extra::microtuning::custom(2.f);

        frequency.in <- N::noteToFrequency(e.pitch);
        //frequency.in <- N::noteToFrequency(e.pitch, extra::microtuning::intervals::justLimit11); //for custom, use this line instead of the previous line
        
        ampEnv.eventIn <- e;
        lfoF.in <- 1.f * (float(e.pitch)/128.f)**2.f;
        filterLFO.sync <- 0.25f;
    }

    event eventIn(std::notes::NoteOff e)
    {
        ampEnv.eventIn <- e;
    }

    connection
    {
        resonance -> filter.resonance;
        cutoff + filterLFO.out[0]*0.2f -> filter.vc;
        lfoF.out -> filterLFO.frequency;
        frequency.out -> osc1.frequency;
        // frequency.out*1.01f -> osc2.frequency;

        2.f*osc1.out  -> filter.in; 0.5f*ampEnv.out * filter.out ->   out;

        // 0.6f*(osc1.out + 0.1f*osc2.out)* 0.5f*ampEnv.out  ->   out;

        // 0.6f*(osc1.out)* 0.5f*ampEnv.out  ->   out;

    }
}

graph LadderFilter 
{
    input stream float in;
    output stream float out;

    input stream float vc;

    input value float resonance;

    node
    {
        //for more efficient cpu usage, use TanhLowPass instead of SingleLadderStage and change controlVoltage0to1 to coeffExp0to1
        // youll also probably want to adjust the pregain and resonance
        stage0 = extra::waveshaper::TanhLowPass;
        stage1 = extra::waveshaper::TanhLowPass;
        // stage2 = extra::waveshaper::TanhLowPass;
        // stage3 = extra::waveshaper::TanhLowPass;
        fbNode = extra::Dummy(float);
    }

    float resComp(float x)
    {
        float thresh=0.7f;
        if(x>thresh)
            return pow(thresh/x,3.f);
        
        return 1.f;
    }

    connection
    {
        vc -> stage0.coeffExp0to1;
        vc -> stage1.coeffExp0to1;
        // vc -> stage2.coeffExp0to1;
        // vc -> stage3.coeffExp0to1;

        in - resonance* 10.f*resComp(vc)*fbNode.out -> stage0.in;  
        stage0.out -> stage1.in; 
        // stage1.out -> stage2.in; 
        // stage2.out -> stage3.in; 
        stage1.out -> [1] -> fbNode;
        stage1.out -> out;

    }
    
}